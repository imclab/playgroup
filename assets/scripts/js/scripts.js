// Generated by CoffeeScript 1.4.0

/*
#============================================================
#
# Array augmentation.
#
# @author Matthew Wagerfield (Fantasy Interactive)
#
#============================================================
*/


/*
# Removes an element from an array.
# @param {Object} element Element to remove.
*/


(function() {
  var CONTROLLERS, Class, Color, DEBUG, DOGTAG, Ease, GUI, GraphController, Layout, MODELS, PG, PROJECT, STATS, Utils, WebRTC, log, moduleKeywords, namespace, warn,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.remove = function(element) {
    var t, _ref;
    if ((t = this.indexOf(element)) > -1) {
      return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);
    }
  };

  /* --------------------------------------------
       Begin Math.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Math augmentation.
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  Math.PI2 = Math.PI * 2;

  Math.PIH = Math.PI / 2;

  Math.PIR = 180 / Math.PI;

  Math.PID = Math.PI / 180;

  /*
  # Converts radians to degrees.
  # @param {number} radians The radians to convert.
  # @return {number} The value in degrees.
  */


  Math.radiansToDegrees = function(radians) {
    return radians * Math.PIR;
  };

  /*
  # Converts degrees to radians.
  # @param {number} degrees The degrees to convert.
  # @return {number} The value in radians.
  */


  Math.degreesToRadians = function(degrees) {
    return degrees * Math.PID;
  };

  /*
  # Normalises a given value.
  # @param {number} value The value to normalise.
  # @param {number} min The minimum value in the range.
  # @param {number} max The maximum value in the range.
  # @return {value} The normalised number.
  */


  Math.normalise = function(value, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    return (value - min) / (max - min);
  };

  Math.normalize = Math.normalise;

  /*
  # Interpolates between two values by a given multiplier.
  # @param {number} value The multiplier value.
  # @param {number} min The minimum value in the range.
  # @param {number} max The maximum value in the range.
  # @return {value} The interpolated number.
  */


  Math.interpolate = function(value, min, max) {
    return min + (max - min) * value;
  };

  /*
  # Maps a value within a certain range to another range.
  # @param {number} value The value to map.
  # @param {number} min1 The minimum value in the first range.
  # @param {number} max1 The maximum value in the first range.
  # @param {number} min2 The minimum value in the second range.
  # @param {number} max2 The maximum value in the second range.
  # @return {value} The mapped number.
  */


  Math.map = function(value, min1, max1, min2, max2) {
    return Math.interpolate(Math.normalise(value, min1, max1), min2, max2);
  };

  /*
  # Clamps a number within a specified range.
  # @param {number} value The value to clamp.
  # @param {number} min The minimum value.
  # @param {number} max The maximum value.
  # @return {value} The clamped number.
  */


  Math.clamp = function(value, min, max) {
    value = Math.max(value, min);
    value = Math.min(value, max);
    return value;
  };

  /*
  # Return the sign of the value.
  # @param {number} value The number.
  # @return {value} 1 or -1 depending on the sign.
  */


  Math.sign = function(value) {
    if (value >= 0) {
      return 1;
    } else {
      return -1;
    }
  };

  /*
  # Generates a random number within a specified range.
  # @param {number} min Minimum number in the range.
  # @param {number} max Maximum number in the range.
  # @param {boolean} round Whether or not to round the generated value.
  # @return {number} Random number within the specified range.
  */


  Math.randomInRange = function(min, max, round) {
    var value;
    if (round == null) {
      round = false;
    }
    value = Math.map(Math.random(), 0, 1, min, max);
    if (round) {
      value = Math.round(value);
    }
    return value;
  };

  /* --------------------------------------------
       Begin Ease.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Easing functions.
  #
  # @param {number} t Time.
  # @param {number} d Duration.
  # @param {number} b Beginning value.
  # @param {number} c Total change.
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  Ease = (function() {
    /*
      #========================================
      # Quadratic
      #========================================
    */

    function Ease() {}

    Ease.quadIn = function(t, d, b, c) {
      return c * (t /= d) * t + b;
    };

    Ease.quadOut = function(t, d, b, c) {
      return -c * (t /= d) * (t - 2) + b;
    };

    Ease.quadInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * t * t + b;
      }
      return -c / 2 * ((--t) * (t - 2) - 1) + b;
    };

    /*
      #========================================
      # Cubic
      #========================================
    */


    Ease.cubicIn = function(t, d, b, c) {
      return c * (Math.pow(t / d, 3)) + b;
    };

    Ease.cubicOut = function(t, d, b, c) {
      return c * ((Math.pow(t / d - 1, 3)) + 1) + b;
    };

    Ease.cubicInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * (Math.pow(t, 3)) + b;
      }
      return c / 2 * ((Math.pow(t - 2, 3)) + 2) + b;
    };

    /*
      #========================================
      # Quartic
      #========================================
    */


    Ease.quartIn = function(t, d, b, c) {
      return c * (Math.pow(t / d, 4)) + b;
    };

    Ease.quartOut = function(t, d, b, c) {
      return -c * ((Math.pow(t / d - 1, 4)) - 1) + b;
    };

    Ease.quartInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * (Math.pow(t, 4)) + b;
      }
      return -c / 2 * ((Math.pow(t - 2, 4)) - 2) + b;
    };

    /*
      #========================================
      # Quintic
      #========================================
    */


    Ease.quintIn = function(t, d, b, c) {
      return c * (Math.pow(t / d, 5)) + b;
    };

    Ease.quintOut = function(t, d, b, c) {
      return c * ((Math.pow(t / d - 1, 5)) + 1) + b;
    };

    Ease.quintInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * (Math.pow(t, 5)) + b;
      }
      return c / 2 * ((Math.pow(t - 2, 5)) + 2) + b;
    };

    /*
      #========================================
      # Exponential
      #========================================
    */


    Ease.expoIn = function(t, d, b, c) {
      return c * (Math.pow(2, 10 * (t / d - 1))) + b;
    };

    Ease.expoOut = function(t, d, b, c) {
      return c * (-(Math.pow(2, -10 * t / d)) + 1) + b;
    };

    Ease.expoInOut = function(t, d, b, c) {
      if ((t /= d / 2) < 1) {
        return c / 2 * (Math.pow(2, 10 * (t - 1))) + b;
      }
      return c / 2 * (-(Math.pow(2, -10 * --t)) + 2) + b;
    };

    return Ease;

  })();

  /* --------------------------------------------
       Begin Color.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Collection of colour methods.
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  Color = (function() {
    /*
      # Converts a hex string ().
      # @param {number} hex Hex value of the color.
      # @param {number} range Range of the color.
      # @return {object} The Color.
    */

    function Color() {}

    Color.rgb = function(hex, range) {
      var b, g, r;
      if (range == null) {
        range = 255;
      }
      hex = hex.replace('#', '');
      return {
        r: (r = (parseInt(hex.substring(0, 2), 16)) / range),
        g: (g = (parseInt(hex.substring(2, 4), 16)) / range),
        b: (b = (parseInt(hex.substring(4, 6), 16)) / range),
        colors: [r, g, b]
      };
    };

    /*
      # Converts a hex string ().
      # @param {number} hex Hex value of the color.
      # @param {number} alpha Opacity of the color.
      # @param {number} range Range of the color.
      # @return {object} The Color.
    */


    Color.rgba = function(hex, alpha, range) {
      var color;
      if (range == null) {
        range = 255;
      }
      color = this.rgb(hex, range);
      color.a = alpha;
      color.colors.push(alpha);
      return color;
    };

    return Color;

  })();

  /* --------------------------------------------
       Begin WebRTC.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # WebRTC.
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  WebRTC = (function() {

    function WebRTC() {}

    return WebRTC;

  })();

  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

  window.URL = window.URL || window.webkitURL;

  /* --------------------------------------------
       Begin Utils.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Generic Utilities
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  Utils = (function() {
    /*
      # Generates a GUID.
      # @param {number} length The length of the guid.
      # @param {string} prefix String to prefix the GUID with.
      # @return {string} The generated GUID.
    */

    function Utils() {}

    Utils.guid = function(length, prefix) {
      var guid, i;
      if (length == null) {
        length = 8;
      }
      if (prefix == null) {
        prefix = 'mw';
      }
      guid = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
          _results.push((Math.random().toFixed(1)).substr(2));
        }
        return _results;
      })();
      guid = "" + prefix + (guid.join(''));
      return guid;
    };

    /*
      # Prefixes a given method.
      # @param {object} object The object to add the method to.
      # @param {string} method The method to add to the object.
      # @param {string} prefixes Array of prefixes.
      # @return {object} The object.
    */


    Utils.prefix = function(object, method, prefixes) {
      if (prefixes == null) {
        prefixes = ['webkit', 'moz', 'ms'];
      }
      return object;
    };

    return Utils;

  })();

  /* --------------------------------------------
       Begin Class.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Abstract Class
  #
  # Intergrates mixins into CoffeeScript classes.
  #
  # @author Matthew Wagerfield
  # @example
  #
  #  # Object that properties will be added to the User class
  #  classProperties =
  #    find: (id) ->
  #    create: (attrs) ->
  #
  #  # Object that properties will be added to the prototype object
  #  # of the User class (all instances of the class will get it)
  #  instanceProperties =
  #    save: ->
  #
  #  class User extends Class
  #    @extend classProperties
  #    @include instanceProperties
  #
  #  # Call class method added with 'extend'
  #  user = User.find(1)
  #
  #  # Call instance method added with 'include'
  #  user = new User
  #  user.save()
  #
  #  or shortcut (do both 'extend' and 'include'):
  #
  #  # Object with properties to be added to the User class
  #  ORM =
  #    find: (id) ->
  #    create: (attrs) ->
  #    extended: ->
  #      @include
  #        save: ->
  #
  #  class User extends Class
  #    @extend ORM
  #
  #============================================================
  */


  moduleKeywords = ['extended', 'included', 'class', 'constructor'];

  Class = (function() {
    /*
      #========================================
      # Class Variables
      #========================================
    */

    function Class() {}

    Class["class"] = 'Class';

    Class.name = null;

    /*
      #========================================
      # Class Methods
      #========================================
    */


    Class.extend = function(object) {
      var key, value, _ref;
      for (key in object) {
        value = object[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = object.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    /*
      # Extends the class with instance properties
    */


    Class.include = function(object) {
      var key, value, _ref;
      for (key in object) {
        value = object[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = object.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    Class.prototype["class"] = function() {
      return this.constructor["class"];
    };

    Class.prototype.initialise = function() {
      this.name = this["class"]().replace(/^.+\./, '');
      log("initialise: " + (this["class"]()));
    };

    return Class;

  })();

  /* --------------------------------------------
       Begin Base.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Project Base
  #
  # Defines the project name and namespace as well as some
  # conveniece methods for logging messages to the console.
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  DEBUG = true;

  STATS = true;

  DOGTAG = 'rtc';

  this[DOGTAG] = {};

  /*
  # Logs the provided values in the console.
  # @param {object} values The values to be logged.
  */


  log = function() {
    var values;
    values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (typeof console !== "undefined" && console !== null) {
      console.log.apply(console, ["" + DOGTAG + " »"].concat(__slice.call(values)));
    }
  };

  /*
  # Logs a warning in the console.
  # @param {object} values The values to be logged.
  */


  warn = function() {
    var values;
    values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (typeof console !== "undefined" && console !== null) {
      console.warn.apply(console, ["" + DOGTAG + " »"].concat(__slice.call(values)));
    }
  };

  /*
  # First checks for the provided namespace, and creates it if not found.
  # @param {string} namespace The namespace as a string.
  # @return {object} Reference to the most nested object in the namespace.
  */


  namespace = function(namespace) {
    var space, target, _i, _len, _ref, _ref1;
    target = this[DOGTAG];
    if (typeof namespace === 'string') {
      _ref = namespace.split('.');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        space = _ref[_i];
        target = (_ref1 = target[space]) != null ? _ref1 : target[space] = {};
      }
    }
    return target;
  };

  PROJECT = namespace();

  CONTROLLERS = namespace('controllers');

  MODELS = namespace('models');

  /* --------------------------------------------
       Begin Layout.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Layout
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  Layout = (function() {
    /*
      #========================================
      # Constants
      #========================================
    */

    var DELAY;

    DELAY = 200;

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    Layout.prototype.$window = null;

    Layout.prototype.$document = null;

    Layout.prototype.documentHeight = 0;

    Layout.prototype.documentWidth = 0;

    Layout.prototype.windowHeight = 0;

    Layout.prototype.windowWidth = 0;

    Layout.prototype.resized = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    function Layout() {
      this.onWindowResize = __bind(this.onWindowResize, this);

      this.addEventListeners = __bind(this.addEventListeners, this);

      this.dimensions = __bind(this.dimensions, this);

      this.initialise = __bind(this.initialise, this);
      this.$window = $(window);
      this.$document = $(document);
      this.resized = new signals.Signal;
      return;
    }

    Layout.prototype.initialise = function() {
      this.dimensions();
      this.addEventListeners();
    };

    Layout.prototype.dimensions = function() {
      return {
        documentHeight: this.documentHeight = this.$document.height(),
        documentWidth: this.documentWidth = this.$document.width(),
        windowHeight: this.windowHeight = this.$window.height(),
        windowWidth: this.windowWidth = this.$window.width()
      };
    };

    Layout.prototype.addEventListeners = function() {
      this.$window.on('resize', _.debounce(this.onWindowResize, DELAY));
    };

    /*
      #========================================
      # Callbacks
      #========================================
    */


    Layout.prototype.onWindowResize = function(event) {
      var dh, dw, wh, ww;
      ww = this.windowWidth !== this.$window.width();
      wh = this.windowHeight !== this.$window.height();
      dw = this.documentWidth !== this.$document.width();
      dh = this.documentHeight !== this.$document.height();
      if (dh || dw || wh || ww) {
        this.resized.dispatch(this.dimensions());
      }
    };

    return Layout;

  })();

  /* --------------------------------------------
       Begin GraphController.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # DAT GUI Graph Controller
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  GraphController = (function() {
    /*
      #========================================
      # Constants
      #========================================
    */

    var COLOR, DEFAULT;

    COLOR = 0xFFDD66;

    DEFAULT = [
      {
        x: 0.0,
        y: 0.0
      }, {
        x: 0.2,
        y: 0.8
      }, {
        x: 1.0,
        y: 1.0
      }
    ];

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    GraphController.prototype.gui = null;

    GraphController.prototype.object = null;

    GraphController.prototype.property = null;

    GraphController.prototype.initialValue = null;

    GraphController.prototype.value = null;

    GraphController.prototype.width = null;

    GraphController.prototype.height = null;

    GraphController.prototype.domElement = null;

    GraphController.prototype.container = null;

    GraphController.prototype.wrapper = null;

    GraphController.prototype.title = null;

    GraphController.prototype.canvas = null;

    GraphController.prototype.context = null;

    GraphController.prototype.controlPoints = null;

    GraphController.prototype.bezierPoints = null;

    GraphController.prototype.activePoint = null;

    GraphController.prototype.onChangeCallback = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    function GraphController(object, property, gui) {
      var value, _ref;
      this.object = object;
      this.property = property;
      this.gui = gui;
      this.onWindowMouseUp = __bind(this.onWindowMouseUp, this);

      this.onWindowMouseMove = __bind(this.onWindowMouseMove, this);

      this.onHandleMouseDown = __bind(this.onHandleMouseDown, this);

      this.onChange = __bind(this.onChange, this);

      this.getValue = __bind(this.getValue, this);

      this.setValue = __bind(this.setValue, this);

      this.validate = __bind(this.validate, this);

      this.drawPoint = __bind(this.drawPoint, this);

      this.drawGrid = __bind(this.drawGrid, this);

      this.draw = __bind(this.draw, this);

      this.getFactoral = __bind(this.getFactoral, this);

      this.getPoint = __bind(this.getPoint, this);

      this.getCoordinate = __bind(this.getCoordinate, this);

      this.getOffset = __bind(this.getOffset, this);

      this.updateBezierPoints = __bind(this.updateBezierPoints, this);

      this.validateControlPoints = __bind(this.validateControlPoints, this);

      this.setControlPointPosition = __bind(this.setControlPointPosition, this);

      this.removeControlPoint = __bind(this.removeControlPoint, this);

      this.addControlPoint = __bind(this.addControlPoint, this);

      this.interpolate = __bind(this.interpolate, this);

      this.clamp = __bind(this.clamp, this);

      value = this.validate(this.object[this.property]) ? this.object[this.property] : DEFAULT;
      this.value = this.initialValue = value;
      this.title = document.createElement('span');
      this.title.className = 'property-name';
      this.title.textContent = property;
      this.canvas = document.createElement('canvas');
      this.context = this.canvas.getContext('2d');
      this.wrapper = document.createElement('div');
      this.wrapper.className = 'graph-wrapper';
      this.wrapper.appendChild(this.canvas);
      this.container = document.createElement('div');
      this.container.appendChild(this.title);
      this.container.appendChild(this.wrapper);
      this.domElement = document.createElement('li');
      this.domElement.className = 'cr graph';
      this.domElement.appendChild(this.container);
      if ((_ref = this.gui) != null) {
        _ref.__ul.appendChild(this.domElement);
      }
      this.width = this.domElement.offsetWidth;
      this.height = this.domElement.offsetHeight;
      this.canvas.width = this.container.offsetWidth - 1;
      this.canvas.height = this.height - this.title.offsetHeight - 5;
      this.controlPoints = [];
      this.setValue(value);
      return;
    }

    GraphController.prototype.clamp = function(value, min, max) {
      value = Math.max(value, min);
      value = Math.min(value, max);
      return value;
    };

    GraphController.prototype.interpolate = function(p0, p1, ratio) {
      var point;
      ratio = this.clamp(ratio, 0, 1);
      point = {
        x: p0.x + (p1.x - p0.x) * ratio,
        y: p0.y + (p1.y - p0.y) * ratio
      };
      return point;
    };

    GraphController.prototype.addControlPoint = function(x, y) {
      var controlPoint, coordinate;
      controlPoint = {
        x: x,
        y: y,
        index: this.controlPoints.length,
        handle: document.createElement('div')
      };
      coordinate = this.getCoordinate(x, y);
      controlPoint.handle.addEventListener('mousedown', this.onHandleMouseDown);
      controlPoint.handle.style.left = "" + coordinate.x + "px";
      controlPoint.handle.style.top = "" + coordinate.y + "px";
      controlPoint.handle.className = 'graph-handle';
      this.wrapper.appendChild(controlPoint.handle);
      this.controlPoints.push(controlPoint);
      this.validateControlPoints();
      return controlPoint;
    };

    GraphController.prototype.removeControlPoint = function(controlPoint) {
      if (controlPoint == null) {
        return;
      }
      controlPoint.handle.removeEventListener('mousedown', this.onHandleMouseDown);
      this.wrapper.removeChild(controlPoint.handle);
      controlPoint.handle = null;
      controlPoint = null;
    };

    GraphController.prototype.setControlPointPosition = function(point, x, y, original, boundary) {
      var coordinate;
      if (original == null) {
        original = true;
      }
      if (boundary == null) {
        boundary = true;
      }
      if (original) {
        point.x = this.clamp(x, point.boundary.x0, point.boundary.x1);
      }
      if (original) {
        point.y = this.clamp(y, point.boundary.y0, point.boundary.y1);
      }
      if (boundary) {
        point.bx = this.clamp(x, point.boundary.x0, point.boundary.x1);
      }
      if (boundary) {
        point.by = this.clamp(y, point.boundary.y0, point.boundary.y1);
      }
      coordinate = this.getCoordinate(point.bx, point.by);
      point.handle.style.left = "" + coordinate.x + "px";
      point.handle.style.top = "" + coordinate.y + "px";
      this.updateBezierPoints();
      this.value[point.index].x = point.bx;
      this.value[point.index].y = point.by;
      return point;
    };

    GraphController.prototype.validateControlPoints = function() {
      var controlPoint, index, isAnchor0, isAnchor1, _i, _len, _ref;
      _ref = this.controlPoints;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        controlPoint = _ref[index];
        isAnchor0 = index === 0;
        isAnchor1 = index === this.controlPoints.length - 1;
        controlPoint.anchor = isAnchor0 || isAnchor1;
        controlPoint.boundary = {
          x0: 0,
          y0: 0,
          x1: 1,
          y1: 1
        };
        if (isAnchor0) {
          controlPoint.boundary.x1 = 0;
        }
        if (isAnchor1) {
          controlPoint.boundary.x0 = 1;
        }
        this.setControlPointPosition(controlPoint, controlPoint.x, controlPoint.y, false);
      }
    };

    GraphController.prototype.updateBezierPoints = function() {
      var BEZIER_POINTS, MIDPOINTS, clone, control, index, point, _i;
      MIDPOINTS = Math.max(0, this.controlPoints.length - 3);
      BEZIER_POINTS = this.controlPoints.length + MIDPOINTS;
      this.bezierPoints = [];
      clone = this.controlPoints.concat();
      point = null;
      for (index = _i = 0; 0 <= BEZIER_POINTS ? _i < BEZIER_POINTS : _i > BEZIER_POINTS; index = 0 <= BEZIER_POINTS ? ++_i : --_i) {
        control = index < 2 || index > BEZIER_POINTS - 3 || index % 2;
        point = control ? clone.shift() : this.interpolate(point, clone[0], 0.5);
        this.bezierPoints.push({
          x: point.x,
          y: point.y
        });
      }
    };

    GraphController.prototype.getOffset = function(element) {
      var offset;
      offset = {
        x: element.offsetLeft,
        y: element.offsetTop
      };
      while (element = element.offsetParent) {
        if (!isNaN(element.offsetLeft)) {
          offset.x += element.offsetLeft;
        }
        if (!isNaN(element.offsetTop)) {
          offset.y += element.offsetTop;
        }
      }
      return offset;
    };

    GraphController.prototype.getCoordinate = function(x, y, floor, offset) {
      var coordinate;
      if (floor == null) {
        floor = true;
      }
      if (offset == null) {
        offset = 0;
      }
      coordinate = {
        x: this.canvas.width * x,
        y: this.canvas.height - this.canvas.height * y
      };
      if (floor) {
        coordinate.x = Math.floor(coordinate.x);
      }
      if (floor) {
        coordinate.y = Math.floor(coordinate.y);
      }
      coordinate.x += offset;
      coordinate.y += offset;
      return coordinate;
    };

    GraphController.prototype.getPoint = function(ratio) {
      var b, f, i, k, n, point, _i;
      point = {
        x: 0,
        y: 0
      };
      if (!this.bezierPoints.length) {
        return point;
      }
      n = this.bezierPoints.length - 1;
      f = this.getFactoral(n);
      for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
        b = f / ((this.getFactoral(i)) * (this.getFactoral(n - i)));
        k = Math.pow(1 - ratio, n - i) * (Math.pow(ratio, i));
        point.x += b * k * this.bezierPoints[i].x;
        point.y += b * k * this.bezierPoints[i].y;
      }
      return point;
    };

    GraphController.prototype.getFactoral = function(value) {
      var factoral, i, _i;
      if (value === 0) {
        return 1;
      }
      factoral = 1;
      for (i = _i = value; value <= 1 ? _i < 1 : _i > 1; i = value <= 1 ? ++_i : --_i) {
        factoral *= i;
      }
      return factoral;
    };

    GraphController.prototype.draw = function(notify) {
      var controlPoint, coordinate, index, method, point, ratio, _i, _j, _len, _ref;
      if (notify == null) {
        notify = true;
      }
      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.drawGrid(16, 1, 1);
      this.context.beginPath();
      _ref = this.controlPoints;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        controlPoint = _ref[index];
        coordinate = this.getCoordinate(controlPoint.x, controlPoint.y, true, 0.5);
        method = index === 0 ? 'moveTo' : 'lineTo';
        this.context[method](coordinate.x, coordinate.y);
      }
      this.context.strokeStyle = "#666";
      this.context.lineWidth = 1;
      this.context.stroke();
      this.context.beginPath();
      for (ratio = _j = 0; _j <= 1; ratio = _j += 0.01) {
        point = this.getPoint(ratio);
        coordinate = this.getCoordinate(point.x, point.y, false);
        method = ratio === 0 ? 'moveTo' : 'lineTo';
        this.context[method](coordinate.x, coordinate.y);
      }
      this.context.strokeStyle = "#" + (COLOR.toString(16));
      this.context.lineWidth = 0.5;
      this.context.stroke();
    };

    GraphController.prototype.drawGrid = function(size, xOffset, yOffset) {
      var c, h, r, v, _i, _j;
      if (xOffset == null) {
        xOffset = 0;
      }
      if (yOffset == null) {
        yOffset = 0;
      }
      this.context.beginPath();
      h = Math.round(this.canvas.width / size);
      v = Math.round(this.canvas.height / size);
      for (c = _i = 1; 1 <= h ? _i < h : _i > h; c = 1 <= h ? ++_i : --_i) {
        this.context.moveTo(xOffset + c * size - 0.5, 0);
        this.context.lineTo(xOffset + c * size - 0.5, this.canvas.height);
      }
      for (r = _j = 1; 1 <= v ? _j < v : _j > v; r = 1 <= v ? ++_j : --_j) {
        this.context.moveTo(0, yOffset + r * size - 0.5);
        this.context.lineTo(this.canvas.width, yOffset + r * size - 0.5);
      }
      this.context.strokeStyle = '#3A3A3A';
      this.context.lineWidth = 1;
      this.context.stroke();
    };

    GraphController.prototype.drawPoint = function(ratio, radius) {
      var b, c, g, h, p, r;
      if (radius == null) {
        radius = 5;
      }
      p = this.getPoint(ratio);
      h = COLOR.toString(16);
      r = parseInt(h.substring(0, 2), 16);
      g = parseInt(h.substring(2, 4), 16);
      b = parseInt(h.substring(4, 6), 16);
      c = this.getCoordinate(p.x, p.y, false);
      this.context.beginPath();
      this.context.arc(c.x, c.y, radius, 0, Math.PI * 2);
      this.context.fillStyle = "rgba(" + r + "," + g + "," + b + ",0.2)";
      this.context.fill();
    };

    GraphController.prototype.validate = function(value) {
      var hasX, hasY, isArray, p, _i, _len;
      isArray = Array.isArray(value || function(value) {
        return Object.prototype.toString.call(value === '[object Array]');
      });
      if (!isArray) {
        console.warn('GraphController: value must be an array of point objects: {x:0, y:0}');
        return false;
      }
      if (!(value.length > 1)) {
        console.warn('GraphController: value must have atleast 2 point objects');
        return false;
      }
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        p = value[_i];
        hasX = p.x != null;
        hasY = p.y != null;
        if (!(hasX && hasY)) {
          console.warn('GraphController: value objects must have both an x and y property with a values ranging from 0 to 1');
          return false;
        }
      }
      return true;
    };

    GraphController.prototype.setValue = function(value) {
      var p, _i, _j, _len, _len1, _ref;
      if (!this.validate(value)) {
        return;
      }
      this.value = value;
      _ref = this.controlPoints;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this.removeControlPoint(p);
      }
      this.controlPoints = [];
      for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
        p = value[_j];
        this.addControlPoint(p.x, p.y, false);
      }
      if (typeof this.onChangeCallback === "function") {
        this.onChangeCallback(this.value);
      }
      this.draw();
    };

    GraphController.prototype.getValue = function() {
      return this.value;
    };

    /*
      #========================================
      # Callbacks
      #========================================
    */


    GraphController.prototype.onChange = function(callback) {
      this.onChangeCallback = callback;
    };

    GraphController.prototype.onHandleMouseDown = function(event, controlPoint) {
      var cp, _i, _len, _ref;
      event.preventDefault();
      _ref = this.controlPoints;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cp = _ref[_i];
        if (cp.handle === event.target) {
          this.activePoint = cp;
        }
      }
      document.body.classList.add('unselectable');
      window.addEventListener('mouseup', this.onWindowMouseUp);
      window.addEventListener('mousemove', this.onWindowMouseMove);
    };

    GraphController.prototype.onWindowMouseMove = function(event) {
      var coordinate, graphX, graphY, mouseX, mouseY, pointX, pointY, wrapperOffset;
      wrapperOffset = this.getOffset(this.wrapper);
      mouseX = event.clientX || event.pageX;
      mouseY = event.clientY || event.pageY;
      graphX = mouseX - wrapperOffset.x;
      graphY = mouseY - wrapperOffset.y;
      pointX = graphX / this.canvas.width;
      pointY = 1 - graphY / this.canvas.height;
      this.setControlPointPosition(this.activePoint, pointX, pointY);
      coordinate = this.getCoordinate(this.activePoint.x, this.activePoint.y);
      this.activePoint.handle.style.left = "" + coordinate.x + "px";
      this.activePoint.handle.style.top = "" + coordinate.y + "px";
      if (typeof this.onChangeCallback === "function") {
        this.onChangeCallback(this.value);
      }
      this.draw();
    };

    GraphController.prototype.onWindowMouseUp = function(event) {
      window.removeEventListener('mousemove', this.onWindowMouseMove);
      window.removeEventListener('mouseup', this.onWindowMouseUp);
      document.body.classList.remove('unselectable');
      this.activePoint = null;
    };

    return GraphController;

  })();

  /* --------------------------------------------
       Begin GUI.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # DAT GUI Wrapper
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  GUI = (function() {
    /*
      #========================================
      # Constants
      #========================================
    */

    var ID,
      _this = this;

    function GUI() {}

    ID = 'datgui';

    /*
      #========================================
      # Class Variables
      #========================================
    */


    GUI.gui = null;

    /*
      #========================================
      # Class Methods
      #========================================
    */


    GUI.initialise = function(options) {
      this.options = options;
      this.options.autoPlace = false;
      this.options.resizable = false;
      this.gui = new dat.GUI(this.options);
      this.gui.domElement.setAttribute('id', 'datgui');
      document.body.appendChild(this.gui.domElement);
      window.addEventListener('keydown', this.onKeyDown);
    };

    GUI.addController = function() {
      var controller, id, object, parameters, property, _ref;
      id = arguments[0], object = arguments[1], property = arguments[2], parameters = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      controller = (_ref = this.gui).add.apply(_ref, [object, property].concat(__slice.call(parameters)));
      return controller;
    };

    GUI.addControllerToFolder = function() {
      var controller, folder, object, parameters, property;
      folder = arguments[0], object = arguments[1], property = arguments[2], parameters = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      controller = folder.add.apply(folder, [object, property].concat(__slice.call(parameters)));
      return controller;
    };

    GUI.addColor = function(id, object, property) {
      var controller;
      controller = this.gui.addColor(object, property);
      return controller;
    };

    GUI.addColorToFolder = function(folder, object, property) {
      var controller;
      controller = folder.addColor(object, property);
      return controller;
    };

    GUI.addGraph = function(id, gui, object, property) {
      var controller;
      controller = new GraphController(gui, object, property);
      return controller;
    };

    GUI.addGraphToFolder = function(folder, object, property) {
      var controller;
      controller = new GraphController(object, property, folder);
      return controller;
    };

    GUI.addFolder = function(id) {
      var folder;
      folder = this.gui.addFolder(id);
      return folder;
    };

    GUI.open = function() {
      var _ref;
      if ((_ref = this.gui) != null) {
        _ref.open();
      }
    };

    GUI.close = function() {
      var _ref;
      if ((_ref = this.gui) != null) {
        _ref.close();
      }
    };

    /*
      #========================================
      # Callbacks
      #========================================
    */


    GUI.onKeyDown = function(event) {
      if (event.ctrlKey && event.keyCode === 72) {
        GUI.gui.closed = !GUI.gui.closed;
      }
    };

    return GUI;

  }).call(this);

  /* --------------------------------------------
       Begin Model.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Playgroup: Model
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  MODELS.Model = (function(_super) {

    __extends(Model, _super);

    /*
      #========================================
      # Class Variables
      #========================================
    */


    Model["class"] = 'MODELS.Model';

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    Model.prototype.url = null;

    Model.prototype.dataType = null;

    Model.prototype.data = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    function Model(url, dataType) {
      this.url = url;
      this.dataType = dataType != null ? dataType : 'json';
      this.onLoadFail = __bind(this.onLoadFail, this);

      this.onLoadDone = __bind(this.onLoadDone, this);

      this.parse = __bind(this.parse, this);

      this.initialise = __bind(this.initialise, this);

      this.parsed = new signals.Signal;
      return;
    }

    Model.prototype.initialise = function(options) {
      if (options == null) {
        options = {};
      }
      options = _.extend(options, {
        url: this.url,
        dataType: this.dataType
      });
      this.load = $.ajax(options);
      this.load.done(this.onLoadDone);
      this.load.fail(this.onLoadFail);
    };

    Model.prototype.parse = function(data) {
      this.parsed.dispatch(this);
    };

    /*
      #========================================
      # Callbacks
      #========================================
    */


    Model.prototype.onLoadDone = function(response) {
      this.parse(this.data = response);
    };

    Model.prototype.onLoadFail = function(response) {
      warn("" + (this["class"]()) + ":", response.status, response.statusText);
    };

    return Model;

  })(Class);

  /* --------------------------------------------
       Begin Story.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Playgroup: Story Model
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  MODELS.Story = (function(_super) {

    __extends(Story, _super);

    /*
      #========================================
      # Class Variables
      #========================================
    */


    function Story() {
      this.parse = __bind(this.parse, this);
      return Story.__super__.constructor.apply(this, arguments);
    }

    Story["class"] = 'MODELS.Story';

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    Story.prototype.title = null;

    Story.prototype.characters = null;

    Story.prototype.story = null;

    Story.prototype.nodes = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    Story.prototype.parse = function(data) {
      this.title = data.title;
      this.characters = data.characters;
      this.story = data.story;
      this.nodes = this.story.nodes;
      Story.__super__.parse.apply(this, arguments);
    };

    /*
      #========================================
      # Callbacks
      #========================================
    */


    return Story;

  })(MODELS.Model);

  /* --------------------------------------------
       Begin Controller.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Playgroup: Controller
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  CONTROLLERS.Controller = (function(_super) {

    __extends(Controller, _super);

    /*
      #========================================
      # Class Variables
      #========================================
    */


    Controller["class"] = 'SECTIONS.Controller';

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    Controller.prototype.$context = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    function Controller($context) {
      this.$context = $context;
      this.addEventListeners = __bind(this.addEventListeners, this);

      this.initialise = __bind(this.initialise, this);

      return;
    }

    Controller.prototype.initialise = function() {};

    Controller.prototype.addEventListeners = function() {};

    /*
      #========================================
      # Callbacks
      #========================================
    */


    return Controller;

  })(Class);

  /* --------------------------------------------
       Begin Splashscreen.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Playgroup: Splashscreen
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  CONTROLLERS.Splashscreen = (function(_super) {

    __extends(Splashscreen, _super);

    /*
      #========================================
      # Class Variables
      #========================================
    */


    function Splashscreen() {
      this.addEventListeners = __bind(this.addEventListeners, this);

      this.initialise = __bind(this.initialise, this);
      return Splashscreen.__super__.constructor.apply(this, arguments);
    }

    Splashscreen["class"] = 'CONTROLLERS.Splashscreen';

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    Splashscreen.prototype.$profiles = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    Splashscreen.prototype.initialise = function() {
      this.$profiles = this.$context.find('#profiles');
    };

    Splashscreen.prototype.addEventListeners = function() {};

    /*
      #========================================
      # Callbacks
      #========================================
    */


    return Splashscreen;

  })(CONTROLLERS.Controller);

  /* --------------------------------------------
       Begin Selection.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Playgroup: Selection
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  CONTROLLERS.Selection = (function(_super) {

    __extends(Selection, _super);

    /*
      #========================================
      # Class Variables
      #========================================
    */


    function Selection() {
      this.addEventListeners = __bind(this.addEventListeners, this);

      this.initialise = __bind(this.initialise, this);
      return Selection.__super__.constructor.apply(this, arguments);
    }

    Selection["class"] = 'CONTROLLERS.Selection';

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    Selection.prototype.$profiles = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    Selection.prototype.initialise = function() {
      this.$profiles = this.$context.find('#profiles');
    };

    Selection.prototype.addEventListeners = function() {};

    /*
      #========================================
      # Callbacks
      #========================================
    */


    return Selection;

  })(CONTROLLERS.Controller);

  /* --------------------------------------------
       Begin Story.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Playgroup: Story Controller
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  CONTROLLERS.Story = (function(_super) {
    var ACTIVE, ACTIVE_USER, CHARACTER, DIRECTION, GHOST, HIDE, PENDING, PENDING_USER;

    __extends(Story, _super);

    /*
      #========================================
      # Constants
      #========================================
    */


    function Story() {
      this.iceCallback1 = __bind(this.iceCallback1, this);

      this.onMediaStreamError = __bind(this.onMediaStreamError, this);

      this.onMediaStreamSuccess = __bind(this.onMediaStreamSuccess, this);

      this.start = __bind(this.start, this);

      this.addEventListeners = __bind(this.addEventListeners, this);

      this.setNodeState = __bind(this.setNodeState, this);

      this.setNodeIndex = __bind(this.setNodeIndex, this);

      this.createNode = __bind(this.createNode, this);

      this.parseStory = __bind(this.parseStory, this);

      this.setStory = __bind(this.setStory, this);

      this.setUserId = __bind(this.setUserId, this);

      this.getVideo = __bind(this.getVideo, this);

      this.reset = __bind(this.reset, this);

      this.onKeydown = __bind(this.onKeydown, this);

      this.initialise = __bind(this.initialise, this);
      return Story.__super__.constructor.apply(this, arguments);
    }

    CHARACTER = 'CHARACTER';

    DIRECTION = 'DIRECTION';

    GHOST = 'ghost';

    ACTIVE = 'active';

    ACTIVE_USER = 'active user';

    PENDING = 'pending';

    PENDING_USER = 'pending user';

    HIDE = 'hide';

    /*
      #========================================
      # Class Variables
      #========================================
    */


    Story["class"] = 'CONTROLLERS.Story';

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    Story.prototype.$profiles = null;

    Story.prototype.$profileNodes = null;

    Story.prototype.$script = null;

    Story.prototype.$scriptWrapper = null;

    Story.prototype.$scriptNodes = null;

    Story.prototype.story = null;

    Story.prototype.userId = null;

    Story.prototype.userVideo = null;

    Story.prototype.nodeIndex = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    Story.prototype.initialise = function() {
      this.$profiles = this.$context.find('#profiles');
      this.$profileNodes = this.$profiles.find('.profile');
      this.$script = this.$context.find('#script');
      this.$scriptWrapper = this.$script.find('.wrapper');
      this.reset();
      $(window).on('keydown', this.onKeydown);
    };

    Story.prototype.onKeydown = function(event) {
      event.preventDefault();
      if (event.keyCode === 40) {
        this.setNodeIndex(this.nodeIndex + 1);
      }
      if (event.keyCode === 38) {
        this.setNodeIndex(this.nodeIndex - 1);
      }
    };

    Story.prototype.reset = function() {
      this.$scriptWrapper.empty();
    };

    Story.prototype.getVideo = function() {
      var options;
      options = {
        video: true
      };
      navigator.getUserMedia(options, this.onMediaStreamSuccess, this.onMediaStreamError);
    };

    Story.prototype.setUserId = function(id) {
      if (this.userId !== id) {
        this.userId = id;
      }
    };

    Story.prototype.setStory = function(story) {
      if (this.story !== story) {
        this.story = story;
        this.reset();
        this.parseStory(story);
      }
    };

    Story.prototype.parseStory = function(story) {
      var node, _i, _len, _ref;
      _ref = story.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        this.createNode(node);
      }
      this.$scriptNodes = this.$script.find('p');
      this.start();
    };

    Story.prototype.createNode = function(node) {
      var $node;
      $node = $("<p>" + node.text + "</p>");
      $node.data(CHARACTER, node.character);
      $node.data(DIRECTION, node.direction);
      this.$scriptWrapper.append($node);
    };

    Story.prototype.setNodeIndex = function(index) {
      var $activeNode, newIndex, top;
      this.$localVideo = $('#local video');
      this.$remoteVideo = $('#remote > video');
      this.$miniVideo = $('#mini > video');
      log('LOCAL:', this.$localVideo);
      log('REMOTE:', this.$remoteVideo);
      log('MINI:', this.$miniVideo);
      newIndex = Math.clamp(index, 0, this.story.nodes.length - 1);
      if (this.nodeIndex !== newIndex) {
        this.$scriptNodes.attr({
          "class": 'hide'
        });
        this.nodeIndex = index;
        if (index !== 0) {
          this.setNodeState(index - 1, GHOST);
        }
        this.setNodeState(index + 0, ACTIVE);
        this.setNodeState(index + 1, PENDING);
        $activeNode = this.$script.find('.active');
        log('USER ID:', window.userid);
        if (window.userid === 'b') {
          $activeNode.addClass('b');
        }
        top = $activeNode.position().top;
        this.$scriptWrapper.css({
          top: "" + (-top) + "px"
        });
      }
    };

    Story.prototype.setNodeState = function(index, state) {
      var $node;
      $node = this.$scriptNodes.eq(index);
      $node.removeClass('hide');
      $node.addClass(state);
    };

    Story.prototype.addEventListeners = function() {};

    Story.prototype.start = function() {
      this.setNodeIndex(0);
    };

    /*
      #========================================
      # Callbacks
      #========================================
    */


    Story.prototype.onMediaStreamSuccess = function(stream) {
      var offer, pc1;
      this.userVideo = document.createElement('video');
      this.userVideo.autoplay = true;
      this.userVideo.src = window.URL.createObjectURL(stream);
      document.body.appendChild(this.userVideo);
      pc1 = new webkitPeerConnection00(null, iceCallback1);
      pc1.addStream(stream);
      offer = pc1.createOffer(null);
      pc1.setLocalDescription(pc1.SDP_OFFER, offer);
      pc1.startIce();
    };

    Story.prototype.onMediaStreamError = function(error) {
      log(error);
    };

    Story.prototype.iceCallback1 = function(answer) {
      log('iceCallback1:', answer);
      pc1.setRemoteDescription(pc1.SDP_ANSWER, answer);
    };

    return Story;

  })(CONTROLLERS.Controller);

  /* --------------------------------------------
       Begin Main.coffee
  --------------------------------------------
  */


  /*
  #============================================================
  #
  # Crustation: Main Class
  #
  # @author Matthew Wagerfield
  #
  #============================================================
  */


  PROJECT.Main = (function(_super) {

    __extends(Main, _super);

    /*
      #========================================
      # Class Variables
      #========================================
    */


    Main["class"] = 'PROJECT.Main';

    /*
      #========================================
      # Instance Variables
      #========================================
    */


    Main.prototype.$html = null;

    Main.prototype.$body = null;

    Main.prototype.$content = null;

    Main.prototype.$splashscreen = null;

    Main.prototype.$selection = null;

    Main.prototype.$story = null;

    Main.prototype.layout = null;

    Main.prototype.storyModel = null;

    Main.prototype.storyController = null;

    /*
      #========================================
      # Instance Methods
      #========================================
    */


    function Main() {
      this.onStoryParsed = __bind(this.onStoryParsed, this);

      this.addEventListeners = __bind(this.addEventListeners, this);

      this.addClasses = __bind(this.addClasses, this);

      this.initialise = __bind(this.initialise, this);
      this.$html = $('html');
      this.$body = $('body');
      this.$content = this.$body.find('#content');
      this.$splashscreen = this.$content.find('#splashscreen');
      this.$selection = this.$content.find('#selection');
      this.$story = this.$content.find('#story');
      return;
    }

    Main.prototype.initialise = function() {
      Main.__super__.initialise.apply(this, arguments);
      this.addClasses();
      this.addEventListeners();
    };

    Main.prototype.addClasses = function() {
      this.layout = new Layout;
      this.layout.initialise();
      this.storyModel = new MODELS.Story('/assets/data/story.json');
      this.storyModel.initialise();
      this.storyController = new CONTROLLERS.Story(this.$story);
      this.storyController.initialise();
    };

    Main.prototype.addEventListeners = function() {
      this.storyModel.parsed.add(this.onStoryParsed);
    };

    /*
      #========================================
      # Callbacks
      #========================================
    */


    Main.prototype.onStoryParsed = function(model) {
      this.storyController.setUserId(0);
      this.storyController.setStory(model);
    };

    return Main;

  })(Class);

  this.PG = PG = new PROJECT.Main;

  /* --------------------------------------------
       Begin scripts.coffee
  --------------------------------------------
  */


  $(function() {
    return PG.initialise();
  });

}).call(this);
