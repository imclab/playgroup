//============================================================
//
// Crustation: Mixins
//
// @description Defines project related variables and mixins
//
// @version 1.00
//
// @author matthew.wagerfield@f-i.com (Matthew Wagerfield)
//
// ---------- INDEX ----------
//
// @mixin spritesheet
// @mixin graphic
// @mixin text
// @mixin antialias
//
//============================================================



//============================================================
//
// spritesheet
//
// @param x               :  px, em, %
// @param y               :  px, em, %
// @param repeat          :  repeat, no-repeat
//
//============================================================

=spritesheet($x: 0px, $y: 0px, $repeat: no-repeat)
  background: transparent url("#{$graphics}spritesheet.png") $x $y $repeat



//============================================================
//
// graphic
//
// @param width           :  px
// @param height          :  px
// @param originX         :  px
// @param originY         :  px
// @param indexX          :  Number
// @param indexY          :  Number
// @param offsetX         :  px
// @param offsetY         :  px
// @param target          :  @Inline | @Before | @After
//
//============================================================

=crop($width, $height, $originX, $originY, $indexX, $indexY, $offsetX, $offsetY)
  +spritesheet(($originX - $width * $indexX), ($originY - $height * $indexY))
  background-color: red
  position: absolute
  display: block
  height: $height
  width: $width
  left: $offsetX
  top: $offsetY

=graphic($width, $height, $originX, $originY, $indexX, $indexY, $offsetX, $offsetY, $target)

  // Inline
  @if $target == $Inline
    +crop($width, $height, $originX, $originY, $indexX, $indexY, $offsetX, $offsetY)

  // Before
  @if $target == $Before
    position: relative
    &:before
      +crop($width, $height, $originX, $originY, $indexX, $indexY, $offsetX, $offsetY)
      content: ""

  // After
  @if $target == $After
    position: relative
    &:after
      +crop($width, $height, $originX, $originY, $indexX, $indexY, $offsetX, $offsetY)
      content: ""



//============================================================
//
// rem
//
// @param key               : property
// @param px                : pixel value
//
//============================================================

=rem($key, $px)
  #{$key}: $px
  #{$key}: $px / $remRatio



//============================================================
//
// text
//
// @param family            : defaultFontFamily
// @param size              : defaultFontSize
// @param color             : defaultTextColor
// @param weight            : normal | bold | number
// @param style             : normal | italic
// @param decoration        : none | underline | strikethrough
// @param lineHeight        : normal | pixel value
// @param variant           : normal | small-caps | inherit
//
//============================================================

=text($family: $defaultFontFamily, $size: $defaultFontSize, $color: $defaultTextColor, $weight: normal, $style: normal, $decoration: none, $lineHeight: normal, $variant: normal)

  // Parse unit values to numbers
  $parsedFontBase: $baseFontSize / 1px
  $parsedFontSize: $size / 1px
  $parsedLineHeight: $lineHeight / 1px

  // Get value types
  $fontSizeType: type-of($size)
  $lineHeightType: type-of($lineHeight)

  // Calculate font size
  $calculatedFontSize: null
  @if $fontSizeType == number
    $calculatedFontSize: $parsedFontSize / $parsedFontBase + em
  @else
    $calculatedFontSize: $size

  // Calculate line height
  $calculatedLineHeight: null
  @if $lineHeightType == number and $fontSizeType == number
    $font: $parsedFontSize / $parsedFontBase
    $line: $parsedLineHeight / $parsedFontBase
    $calculatedLineHeight: $line / $font + em
  @else
    $calculatedLineHeight: $lineHeight

  font: $style $variant $weight $calculatedFontSize / $calculatedLineHeight $family
  text-decoration: $decoration
  color: $color



//============================================================
//
// antialias
//
// @param value         : true | false
//
//============================================================

=antialias($value: true)
  @if $value == true
    -webkit-font-smoothing: antialiased
  @else
    -webkit-font-smoothing: auto
